#compdef mygit-log

typeset -A opt_args
local context state line
local fontdir
#fontdir=$(_call_program path figlet -I2 2>/dev/null)

_arguments -s \
  '*:file or directory:_files'

# (( $+opt_args[-d] )) && fontdir=$opt_args[-d]

# case $state in
# (fonts)
#   _files -W $fontdir -g '*flf*(:r)' && return 0
#   ;;
# (controls)
#   _files -W $fontdir -g '*flc*(:r)' && return 0
#   ;;
# esac

return 1





# #compdef mygit-log

# typeset -A opt_args
# local context state line
# local fontdir
# fontdir=$(_call_program path figlet -I2 2>/dev/null)

# _arguments -s -S \
#   "(-l -c -r)-x[use default justification of font]" \
#   "(-x -c -r)-l[left justify]" \
#   "(-x -l -r)-c[center justify]" \
#   "(-x -l -c)-r[right justify]" \
#   "(-S -s -o -W -m)-k[use kerning]" \
#   "(-k -s -o -W -m)-S[smush letters together or else!]" \
#   "(-k -S -o -W -m)-s[smushed spacng]" \
#   "(-k -S -s -W -m)-o[let letters overlap]" \
#   "(-k -S -s -o -m)-W[wide spacing]" \
#   "(-p)-n[normal mode]" \
#   "(-n)-p[paragraph mode]" \
#   "(-E)-D[use Deutsch character set]" \
#   "(-D)-E[use English character set]" \
#   "(-X -R)-L[left-to-right]" \
#   "(-L -X)-R[right-to-left]" \
#   "(-L -R)-X[use default writing direction of font]" \
#   "(-w)-t[use terminal width]" \
#   "(-t)-w+[specify output width]:output width (in columns):" \
#   "(-k -S -s -o -W)-m+[specify layout mode]:layout mode:" \
#   "(-I)-v[version]" \
#   "(-v)-I+[display info]:info code:(-1 0 1 2 3 4)" \
#   "-d+[specify font directory]:font directory:_files -/" \
#   "-f+[specify font]:font:->fonts" \
#   "(-N)-C+[specify control file]:control file:->controls" \
#   "(-C)-N[clear controlfile list]" \
#   && return 0

# (( $+opt_args[-d] )) && fontdir=$opt_args[-d]

# case $state in
# (fonts)
#   _files -W $fontdir -g '*flf*(:r)' && return 0
#   ;;
# (controls)
#   _files -W $fontdir -g '*flc*(:r)' && return 0
#   ;;
# esac

# return 1






# /usr/share/zsh/functions/Completion/Unix/

# #compdef cp
#
# _arguments -s \
#   '(-a --archive)'{-a,--archive}'[same as -dpR]' \
#   '(-b --backup)-b[backup]' \
#   '(-b --backup)--backup=:method:(none off numbered t existing nil simple never)' \
#   '--copy-contents[copy contents of special files when recursive]' \
#   '-d[same as --no-dereference --preserve=link]' \
#   '(-f --force)'{-f,--force}'[remove and retry for destinations that cannot be opened]' \
#   '(-i --interactive)'{-i,--interactive}'[prompt before overwrite]' \
#   '-H[follow command-line symbolic links]' \
#   '(-l --link)'{-l,--link}'[link files instead of copying]' \
#   '(-L --dereference)'{-L,--dereference}'[always follow symbolic links]' \
#   '-p[same as --preserve=mode,ownership,timestamps]' \
#   '--preserve=:attributes to preserve:_values -s , attribute mode ownership timestamps links all' \
#   '--no-preserve=:attributes not to preserve:_values -s , attribute mode ownership timestamps links all' \
#   '--parents[append source path to target directory]' \
#   '-P[same as --no-dereference]' \
#   '(-R -r --recursive)'{-R,-r,--recursive}'[copy directories recursively]' \
#   '--remove-destination[remove each existing destination file before attempting to open it]' \
#   '--reply=:how to handle the prompt about an existing destination file:(yes no query)' \
#   '--sparse=:when to create sparse files:(auto always never)' \
#   '--strip-trailing-slashes[remove any trailing slashes from each source argument]' \
#   '(-s --symbolic-link)'{-s,--symbolic-link}'[make symbolic links instead of copies of non-directories]' \
#   '(-S --suffix)'{-S,--suffix=}':backup suffix:' \
#   '--target-directory=:target directory:_files -/' \
#   '(-u --update)'{-u,--update}'[copy only when source is newer than destination or destination is missing]' \
#   '(-v --verbose)'{-v,--verbose}'[explain what is being done]' \
#   '(-x --one-file-system)'{-x,--one-file-system}'[stay on this file system]' \
#   '--help' \
#   '--version' \
#   '*:file or directory:_files'

